
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016a  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000112  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000147  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000190  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000091  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000078d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	unsigned char c = 0, up = 0, down = 0;
	DDRA = 0x0F;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8b bb       	out	0x1b, r24	; 27
	//PORTC = 0x00;
	DDRB=0x00;
  74:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  76:	18 ba       	out	0x18, r1	; 24
#include <util/delay.h>


int main(void)
{
	unsigned char c = 0, up = 0, down = 0;
  78:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = c;
		//up = PINC;
		down = PINB;
		if(down==0b00001000){
			c++;
			if(c>15) c = 0;
  7a:	20 e0       	ldi	r18, 0x00	; 0
	
	
    /* Replace with your application code */
    while (1) 
    {
		PORTA = c;
  7c:	9b bb       	out	0x1b, r25	; 27
		//up = PINC;
		down = PINB;
  7e:	86 b3       	in	r24, 0x16	; 22
		if(down==0b00001000){
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	71 f4       	brne	.+28     	; 0xa0 <main+0x34>
			c++;
  84:	9f 5f       	subi	r25, 0xFF	; 255
			if(c>15) c = 0;
  86:	90 31       	cpi	r25, 0x10	; 16
  88:	08 f0       	brcs	.+2      	; 0x8c <main+0x20>
  8a:	92 2f       	mov	r25, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	3f e9       	ldi	r19, 0x9F	; 159
  8e:	46 e8       	ldi	r20, 0x86	; 134
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	31 50       	subi	r19, 0x01	; 1
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
  9e:	ee cf       	rjmp	.-36     	; 0x7c <main+0x10>
			_delay_ms(500);
		}
		if(down==0b000010000){
  a0:	80 31       	cpi	r24, 0x10	; 16
  a2:	61 f7       	brne	.-40     	; 0x7c <main+0x10>
			c--;
  a4:	91 50       	subi	r25, 0x01	; 1
  a6:	3f e9       	ldi	r19, 0x9F	; 159
  a8:	46 e8       	ldi	r20, 0x86	; 134
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	31 50       	subi	r19, 0x01	; 1
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
  b8:	e1 cf       	rjmp	.-62     	; 0x7c <main+0x10>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
