
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000144  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000188  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ed  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016e  00000000  00000000  000004ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a7  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009f  00000000  00000000  00000837  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 94 00 	call	0x128	; 0x128 <main>
  74:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

int count=0;


ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	count++;
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	90 91 61 00 	lds	r25, 0x0061
  92:	01 96       	adiw	r24, 0x01	; 1
	if(count==16){
  94:	80 31       	cpi	r24, 0x10	; 16
  96:	91 05       	cpc	r25, r1
  98:	29 f0       	breq	.+10     	; 0xa4 <__vector_1+0x28>
int count=0;


ISR(INT0_vect)
{
	count++;
  9a:	90 93 61 00 	sts	0x0061, r25
  9e:	80 93 60 00 	sts	0x0060, r24
  a2:	04 c0       	rjmp	.+8      	; 0xac <__vector_1+0x30>
	if(count==16){
		count=0;
  a4:	10 92 61 00 	sts	0x0061, r1
  a8:	10 92 60 00 	sts	0x0060, r1
	}
	
	PORTA = count;
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e4       	ldi	r24, 0x4F	; 79
  b4:	93 ec       	ldi	r25, 0xC3	; 195
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <__vector_1+0x3a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <__vector_1+0x40>
  bc:	00 00       	nop
	
	_delay_ms(200);
	GIFR = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a bf       	out	0x3a, r24	; 58
	
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_2>:

ISR(INT1_vect)
 {	
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	 count--;
  e0:	80 91 60 00 	lds	r24, 0x0060
  e4:	90 91 61 00 	lds	r25, 0x0061
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	28 f0       	brcs	.+10     	; 0xf6 <__vector_2+0x26>
  ec:	90 93 61 00 	sts	0x0061, r25
  f0:	80 93 60 00 	sts	0x0060, r24
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_2+0x32>
	 if(count==-1){
		count=15;
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 61 00 	sts	0x0061, r25
  fe:	80 93 60 00 	sts	0x0060, r24
	 }
	
	 PORTA = count;
 102:	80 91 60 00 	lds	r24, 0x0060
 106:	8b bb       	out	0x1b, r24	; 27
 108:	8f e4       	ldi	r24, 0x4F	; 79
 10a:	93 ec       	ldi	r25, 0xC3	; 195
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <__vector_2+0x3c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_2+0x42>
 112:	00 00       	nop
	 	_delay_ms(200);

	 	GIFR = 0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bf       	out	0x3a, r24	; 58
	// _delay_ms(500);
 }
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <main>:
	
int main(void) { 
	
	DDRA = 0x0F;
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	8a bb       	out	0x1a, r24	; 26
	PORTA = count;
 12c:	80 91 60 00 	lds	r24, 0x0060
 130:	8b bb       	out	0x1b, r24	; 27
	
	GICR |= (1<<INT0) | (1<<INT1);
 132:	8b b7       	in	r24, 0x3b	; 59
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	8b bf       	out	0x3b, r24	; 59

	//MCUCSR = MCUCSR & 0b10111111;
	MCUCR =  0b00001010; 
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	85 bf       	out	0x35, r24	; 53
	
	sei();
 13c:	78 94       	sei
 13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0x16>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
