
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b8  00800060  0000012a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009df  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000648  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000440  00000000  00000000  0000142b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000383  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000794  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000241f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 31       	cpi	r26, 0x18	; 24
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a8 e1       	ldi	r26, 0x18	; 24
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 31       	cpi	r26, 0x18	; 24
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8a:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <rotate1>:
		
	}
}

void rotate1()
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	int i,j,k,tempAlpha,temp;
	unsigned char column;
	for(int i=0 ; i<=8; i++){
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	48 e7       	ldi	r20, 0x78	; 120
  a4:	50 e0       	ldi	r21, 0x00	; 0
				for (int j=0;j<8;j++)
				{
					PORTA = PORT[j];// ROW
					tempAlpha = ALPHA[0][j];
					temp = tempAlpha;
					temp<<=(8-i);
  a6:	08 e0       	ldi	r16, 0x08	; 8
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	29 c0       	rjmp	.+82     	; 0xfe <rotate1+0x6c>
	unsigned char column;
	for(int i=0 ; i<=8; i++){
		for (int n=0;n<200;n++){ //to catch eye
				for (int j=0;j<8;j++)
				{
					PORTA = PORT[j];// ROW
  ac:	8d 91       	ld	r24, X+
  ae:	8b bb       	out	0x1b, r24	; 27
					tempAlpha = ALPHA[0][j];
  b0:	81 91       	ld	r24, Z+
  b2:	91 91       	ld	r25, Z+
					temp = tempAlpha;
					temp<<=(8-i);
  b4:	7c 01       	movw	r14, r24
  b6:	06 2e       	mov	r0, r22
  b8:	02 c0       	rjmp	.+4      	; 0xbe <rotate1+0x2c>
  ba:	ee 0c       	add	r14, r14
  bc:	ff 1c       	adc	r15, r15
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <rotate1+0x28>
					temp= (tempAlpha>>i) | temp;//show character (COLUMN)
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <rotate1+0x38>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <rotate1+0x34>
					PORTD = ~temp;//show character (COLUMN)
  ce:	8e 29       	or	r24, r14
  d0:	9f 29       	or	r25, r15
  d2:	80 95       	com	r24
  d4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	86 ea       	ldi	r24, 0xA6	; 166
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <rotate1+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <rotate1+0x4c>
{
	int i,j,k,tempAlpha,temp;
	unsigned char column;
	for(int i=0 ; i<=8; i++){
		for (int n=0;n<200;n++){ //to catch eye
				for (int j=0;j<8;j++)
  de:	e4 17       	cp	r30, r20
  e0:	f5 07       	cpc	r31, r21
  e2:	21 f7       	brne	.-56     	; 0xac <rotate1+0x1a>

					_delay_us(500);
					
				}
				
				PORTA=0x00;//clear screen after show
  e4:	1b ba       	out	0x1b, r1	; 27
  e6:	21 97       	sbiw	r28, 0x01	; 1
void rotate1()
{
	int i,j,k,tempAlpha,temp;
	unsigned char column;
	for(int i=0 ; i<=8; i++){
		for (int n=0;n<200;n++){ //to catch eye
  e8:	29 f0       	breq	.+10     	; 0xf4 <rotate1+0x62>
  ea:	a0 e6       	ldi	r26, 0x60	; 96
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e8 e6       	ldi	r30, 0x68	; 104
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	dc cf       	rjmp	.-72     	; 0xac <rotate1+0x1a>

void rotate1()
{
	int i,j,k,tempAlpha,temp;
	unsigned char column;
	for(int i=0 ; i<=8; i++){
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	29 30       	cpi	r18, 0x09	; 9
  fa:	31 05       	cpc	r19, r1
  fc:	31 f0       	breq	.+12     	; 0x10a <rotate1+0x78>
		
	}
}

void rotate1()
{
  fe:	c8 ec       	ldi	r28, 0xC8	; 200
 100:	d0 e0       	ldi	r29, 0x00	; 0
				for (int j=0;j<8;j++)
				{
					PORTA = PORT[j];// ROW
					tempAlpha = ALPHA[0][j];
					temp = tempAlpha;
					temp<<=(8-i);
 102:	b8 01       	movw	r22, r16
 104:	62 1b       	sub	r22, r18
 106:	73 0b       	sbc	r23, r19
 108:	f0 cf       	rjmp	.-32     	; 0xea <rotate1+0x58>
				}
				PORTC=0x00;//clear screen after show.
				*/
			}
		}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	08 95       	ret

00000118 <main>:
	{0b11111111,0b11111111,0b11011000,0b11011100,0b11011110,0b11011111,0b11111011,0b01111001}};//characters a,
	char NAME[]={0,5,17,8,13,0,4,10,19,0,1,0,0,11};//circuit diagram character values
	uint8_t l =0;
int main(void)
{
	DDRD = 0xFF;//PORTB,C,D are set as output
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 11c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 11e:	84 bb       	out	0x14, r24	; 20
				
			}
		}
		
		*/
		rotate1();
 120:	0e 94 49 00 	call	0x92	; 0x92 <rotate1>
 124:	fd cf       	rjmp	.-6      	; 0x120 <main+0x8>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
